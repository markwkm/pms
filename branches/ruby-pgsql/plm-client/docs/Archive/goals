Basic todo listing for the PLM

*** Active BUGS ***
- Possible DoS on incorrect SOAP function call by remote client

*** PLM Frontend (EIDETIC) Goals ***
* Search by Patch_Id
* Reports by "kernel string" (auto-search ability)
- test_request: patch selection methods (see Randy) 

*** PLM Frontend (WWW) Goals ***
- Search by patch metadata
- Show summary patch information
- Show detailed patch report
- Per-patch watch list management
- Per-user watch list management
- Per-bug watch list management
- Bug report management
- Per-patch note management
- Approval request management
- Per-user default approval ping reminder settings management
- Per-approval reminder settings management

*** PLM Frontend (command line) Goals ***
* (admin) plm_user_add.pl
- (user) plm.pl user interface script
  - login() verifies username/password and stores them in ~/.plmrc
  * Quick patch submission
  - Configure/view auto_submit & stp flags
  - Configure/view server-side account options
- (admin) plm_usage.pl script
- Add/change/delete the description (note) for a patch
- Add/change/delete a bug report (note) on a patch
- Change a patch mode between private and public
- Mark a patch as deleted
- New admin script: plm_usage

*** PLM Backend Goals ***
* PLM<->External Data Source (PLM:SOAP <-> EXTERNAL:*) Gateway
* (gateway) EXTERNAL Data Source EIDETIC Support
* (gateway) Sync plm_patch meta-data
X (SQL & PLM) Seperate user & user_auth data table information 
* (gateway) External Authentication
* patch*Depend() require PLM & ASP level functionality
* patch*Depend() obsolete PLM & ASP level functionality
- Convert PLM level text wrap & unwrap to use PLM.pm functions
- Move plaintext->uuencode to ASP (soap-prep) layer
- Make the :format: to save patches into the database configurable
- Cache.pm module (caching of on-disk objects - include locking semantics)
- Cache.pm used by the getpatch server
- Cache.pm prune directory script
- Alter priority on auto-request of patches
- PLM Layer Support for:
  - per-patch watch lists
  - per-patch notes
  - per-patch bug reports
  - bug states
  - per-patch/user approval states
  - per-approval entry ping reminders
  - per-bug watch lists
  - per-user (public patch submission) watch lists
  - watch types (email detail/summary)
  - Per-user default approval ping reminder settings
  - Per-patch keyword lists
  - Per-note keyword lists
- SOAP Layer Support for
  - per-patch watch lists
  - per-patch notes
  - per-patch bug reports
  - bug states
  - per-patch/user approval states
  - per-approval entry ping reminders
  - per-bug watch lists
  - per-user (public patch submission) watch lists
  - watch types (email detail/summary)
  - Per-user default approval ping reminder settings
  - Per-patch keyword lists
  - Per-note keyword lists

*** PLM Email-Gateway Goals ***
- Handle compressed content
* Test handling of GPG encrypted content
- .procinfo file & script to support throttling of large patches (only large...)
* patch*Depend() require & obsolete functionality
- Handle note submission
- Handle bug submission

*** PLM Documentation Goals ***
* PLM HOWTO
- Audit PLM docs
- PLM HTML Page explaining what it is and why it's not a replacement for RCCS
- Revise & finish inline docs in the config file example
- Write "watch lists" section
- Write "notes" section
- Write "bug reports" section
- Write "approval process" section
- Write "keywords" section

*** PLM Build Process Goals ***
- Cleanup warnings
- Separate PLM Client & Server Packages
- Separate Perl Modules to seperate by-topic packages 
- Setup requires between packages
- Debian Support
* cfengine support for logrotate configs
* cfengine support for /etc/plm.cfg installs on PLM hosts
- Fold plm setup into Christine's methods
- Document the features in the distributed config example

*********
* NOTES *
*********

 - Bug states: "invalid / fixed / open / closed / more info"
 - Per-patch/user approval states "approved / rejected / on hold / deep freeze"
