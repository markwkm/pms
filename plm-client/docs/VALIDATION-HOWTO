Validation HOWTO

The validation suite is a three part suite.  The first part
is the validation harness, the second is the configuration,
and the third is the actual tests that are performed.


Validation Harness

The validation harness is the main entry point for validating
data.  For each bit of data validation to be done, a function
call is made:

  PLM::Validation::Suite::validate( "testname", arg, ... )

The return value is either a 1 or a 0, 1 for successful passing
of all tests, or 0 for failure.  When a failure happens, a string
is set with the reason for failure.  You can access that string
by doing the following:

  PLM::Validation::Suite::getFailureMessage()




Configuration

Configuration is done in the Config.pm module, this specifies
the tests to be run when the harness is invoked.  The Config
module is non-generic, and needs to be set up for every
application that uses it.

Setting up a Config module is fairly easy.  Really, all you
need to do is include the packages that contain the tests,
then assign an array of tests in the "new" method:

  no strict 'refs';
  package PLM::Validation::Config;

  # packages that contain our test routines must be included here
  use PLM::Validation::Basic;
  use PLM::Validation::Test;
  use PLM::Validation::User;

  # add test validations into the new subroutine
  sub new
  {
      my $self = { };
      bless $self;


      # here's where we put in our definitions
      # test validation
      my @test_suite = ( \&PLM::Validation::Basic::argumentCountTest,
  		         \&PLM::Validation::Test::passTest,
		         \&PLM::Validation::Test::failTest );
      return $self;
  }



The Tests

Tests are simple.  Really all you need to do, is either use
the first argument to identify what you want to test, or ignore
the first argument and run a general test.  You will also want
to set a message if the test fails:

  # validation test suite
  # used specifically for testing, one test returns
  # a pass, the other a fail
  package PLM::Validation::Test;

  use PLM::Validation::Suite;

  # pass this test always
  sub passTest
  {
      return 1;
  }


  # fail this test always
  sub failTest
  {
      PLM::Validation::Suite::setFailureMessage( "failTest: auto-failure" );
    
      return 0;
  }


