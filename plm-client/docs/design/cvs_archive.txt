CVS Pull into PLM:

Overview:  PLM should provide easy access to source regardless of how
      developers create the source.  Many projects use CVS Repositories, 
      and would find it convenient to be able to pull versions from 
      the repository directly into the testing environment in a 
      reproducible way.

We want to make PLM be able to pull from CVS and generate 
plm_patch_id's.


Functional Requirements:

1. a) Add capability to generate a base plm_patch_id which equates 
    to a CVS revision, tag or timestamp.

   b)  Edit user interface to add patches from CVS, using head or 
    input of a revision number, for example.

   c)  Enhance plm_build_tree.pl to pull plm_patch_id's from CVS.

   d)  Add administrative interface to tie source type configuration to a
     software type.

Optional:
2.  Enhance plm_build_tree.pl (some other script) to pull CVS
    from head and then generate a plm_patch_id in PLM.


Question:

Do we tie archive_type(source_type) to software_type, or to plm_patch?

    a) "Archive_type" is currently tied to software_type, which 
    means in order to pull from tar balls or cvs, we would have 
    2 software names:  "linux", and "linux_cvs", for example.  
   
    This would be the easiest to implement on the PLM side, but might 
    complicate things a bit for the clients, which would need to be 
    able to handle differently named directories for the same type
    of software pulled from different sources.

    b) If it is tied to plm_patch_id, we store archive_type with 
    the plm_patch_id, and the software type is always "linux" regardless
    of where it is retrieved from.  The intelligence will be in the
    plm_build_tree.pl for how to handle it.

    This would take some re-working of the tables, and increase the 
    complexity of the queries in PLM.  However, if this significantly
    increases the usefulness of PLM to STP or others in the future
    we should do this.


In order to do CVS pulls on the fly, the following will need to be 
configured in PLM for CVS:  Root, Repository, password.  This will 
be a new PLM Archive type, 'CVS'.  It will be treated a base kernel 
and pulled from the head.



Do we need table 'plm_software_version'?  Why don't we just mark base versions
in table 'plm_patch', and add a 'location' column there?  This table does not
seem to add anything to the design, and there is a one to one relationship
with 'plm_patch'.


To access something from CVS, we need Root, Repository, optionally Tag, 
Password, and optionally version.


Possible Perl modules for CVS Access:
     VCS::CVS
     CVS
     Tie::CVS          inadequate




Plan:

4 Release Process:
    1. Database Cleanup-Merge tables plm_patch, plm_software_version.
    2. Update:  source_type 'URL' works with new multiple source tables.
    3. Add source_type CVS and modules to pull CVS
    4. Change web interface: Add patch to do CVS pull, or regular patches
        according to software_type.



Design:

Part 1:  
Database Changes:   Update data-types
                    Add fields to plm_patch
                    Drop column plm_patch_state_id in plm_patch
                    Drop plm_software_version
                    
Modules:
    Eliminate ASP::Software::software_version_verify
    Eliminate ASP::Software::software_delete_version--not used
    Eliminate PLM::Software::set_version_location--not used
    Eliminate PLM::Software::add_version--not used
    Eliminate PLM::Software::delete_version--not used
    Edit      PLM::Software::verify to only do software.
    Edit      PLM::Patch::add handle base version filename and location 
    Edit      XML::Patch::new Add the two new fields 
    Edit      ASP::Supervisor.pm  - not a join anymore

Scripts:
    Eliminate plm_version_sync.pl --it calls to table plm_software_version
    Edit      plm_archive_sync.pl to call ASP patch_isa_base.
    Edit     admin/sql/plm_setup_db.sql     --  Don't create table plm_software_version


Part 2:

Database Changes:  
    New Tables:  plm_source, plm_source_type.
    Edit Tables:   
        plm_software:  Remove columns 'location' and 'archive_type'
        plm_patch:1
    Rename Table:  plm_archive--> plm_source_sync
New Modules:
   PLM::Source.pm
        New
        get_value
        load
   PLM::SourceType.pm
        New
        get_value

Scripts:
   Edit plm_archive_sync.pl  --Call function get root_location,
          plm_source_type_id from table plm_source, not plm_software
   Edit plm_build_tree.pl::handle_base:  Create 'PLM::Source' Object, call
          Archive::URL::get_file (instead of 'wget', if possible)




Part 3:
How to Track latest:  keep CVS repository local to PLM for each
    source_type with value of 'CVS' for doing diffs off of.  If 
    latest is different do an update on the repository and
    generate a patch.

A) For patch Addition:

New Module/Class:
     Archive::CVS
        Method:  check_current:  Check if current repository head already has
		a plm_patch associated with it.


B) For Patch Retrieval:
Edit plm_build_tree::handle_base: Archive::URL::get_file, or Archive::CVS::

Edit Module/Class:
     Archive::URL
         Method get_file:   will get return file for base source repository.

New Module/Class:
     ASP patch_get_software--->return software_id
     PLM::Patch-->get_software (from source table)
     PLM::Source--->Populate from plm_source table.
     
          
Part 4:
Change web interface:  Patch Add
     *  Now we should put in software type first to get the
        correct options for patch addition.
     *  CVS fields will include name and checkbox(to choose CVS).  Also some
        explanation that pull will be from head.  Patch will return existing
        one if there have been no changes.
